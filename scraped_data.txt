URL: https://soliditylang.org/about/
Content:
About | Solidity Programming Language{skip to content}BlogDocumentationUse casesContributeAboutForum{About}Solidity is a statically-typed curly-braces programming language designed for developing smart contracts that run on the Ethereum Virtual Machine.Get startedContributeSolidityis a powerful programming language designed specifically for writing smart contracts on the Ethereum blockchain. With Solidity, developers can define the rules and behavior ofdecentralized applications (DApps).Smart contracts are programs that are executed inside a peer-to-peer network where nobody has special authority over the execution, and thus they allow to implement tokens of value, ownership, voting and other kinds of logics.Note that when deploying contracts, you should use the latest released version of Solidity. This is because breaking changes as well as new features and bug fixes are introduced regularly.Solidity was publicly previewed for the first time in November 2014 atDevcon0. Versioning for Solidity wascommitted. into the codebase on July 9, 2015, marking Solidity Version 0.0.1. However, v0.1.0 wasn't an actual release yet, and builds of it are not available anymore. You can read more about Solidity's history in the 5 year celebration post from 2020here.The Solidity programming language is anopen-source, community project governed by a core team. The core team is sponsored by theEthereum Foundation.Get involvedGitHubTwitterMastodonMatrixDiscover moreBlogDocumentationUse casesContributeAboutForum2024Solidity Team•Security Policy•Code of Conduct
--------------------------------------------------------------------------------
URL: https://soliditylang.org/
Content:
Home | Solidity Programming Language{skip to content}BlogDocumentationUse casesContributeAboutForum{Solidity}A statically-typed curly-braces programming language designed for developing smart contracts that run onEthereum.pragmacontractfunctionmodifiereventstructenumrequireaddressRead the docsRepositorySoliditySolidity 0.8.28Introducing the newest version of the compiler which brings full support for transient storage state variables of value types, improvements to speed up compilation via IR and lower RAM usage, bugfixes, and more!Solidity is evolving rapidlyWe aim for a regular (non-breaking) release every month, with approximately one breaking release per year. You can follow the implementation status of new features in theSolidity GitHub project.Get startedContribute to SoliditySolidity continues to improve with help from our global community. Check out these ways to get involved and contribute to the Solidity project.Reporting issues and vulnerabilitiesTo report an issue, please use theGitHub issues tracker. To report a vulnerability, please check out the instructions in theSECURITY.md.Translating the documentationTranslations help developers from all corners of the world to be able to read the documentation and learn Solidity.Fixing and responding to issuesFixing and responding to issues, especially those tagged as “good first issue”, is a great way to get started for external contributors.Contributing to language designWe welcome Solidity power users, auditors, security experts and tooling developers to get involved in the Solidity language design process. Join theSolidity forum, where existing properties of the language and proposals for new language features can be discussed.Start contributingStay UpdatedStay always up-to-date by following theSolidity blog.You can see the upcoming changes for the next breaking release by switching from the default branch (develop) to thebreaking branch. You can actively shape Solidity by providing your input and participating in the language design in theSolidity forumand participating in the yearly Solidity developer surveys.Latest from the blogAnnouncing the Winners of the Underhanded Solidity Contest 2024Posted by Vishwa Mehta & USC Judges on October 14, 2024If you have been waiting for the results of the Underhanded Solidity Contest 2024, the countdown is over!

But before we share our insights from this year and declare the results, let's recap the most important aspects of the USC:

In essence, the Underhanded Solidity Contest is about writing seemingly innocent code that has malicious mechanisms or hidden backdoors. It is aimed at:

Raising awareness about smart contract security
Uncovering language design faults
Battle-testing newly introduced language features and restrictions
Highlighting anti-patterns in smart contact development
Establishing...Read moreSolidity 0.8.28 Release AnnouncementPosted by Solidity Team on October 9, 2024We are excited to announce the release of the Solidity Compiler v0.8.28.

This latest version of the compiler brings full support for transient storage state variables of value types, improvements that will speed up compilation via IR and significantly lower memory usage, some bugfixes, and more!

Notable Features

Support for Transient Storage Value Type State Variables

The previous release of the compiler (v0.8.27) introduced support for transient storage variables into the parser (see Additional Notes). This meant that the compiler could accept the syntax...Read moreSolidity 0.8.27 Release AnnouncementPosted by Solidity Team on September 4, 2024We are excited to announce the release of the Solidity Compiler v0.8.27.

This newest version of the compiler brings support for custom errors in require to the legacy pipeline, optimizer improvements such as caching of optimized IR that will speed up compilation via IR, several bugfixes, and more!

Notable Features

Legacy Support for require with Custom Errors

Custom errors in Solidity provide a convenient and gas-efficient way to explain to the user why an operation failed.
Support for using  errors with the require function...Read moreAll blog updatesPlaygroundTry Solidity for yourself in this simple compiler. For a more fully featured browser-based IDE, try usingRemix.Hello World!ERC20Simple AuctionCompiler resultCompiler version:(0bytes)Deployment costs:gasBytecodeAssemblySolidity EventsPast eventsSolidity Summit 2023Istanbul Congress Center, Istanbul, Turkey11/16/2023 - 11/16/2023Event InfoUnderhanded Solidity Contest 2022Remote4/29/2022 - 4/30/2022Event InfoSolidity Summit 2022Tolhuistuin, Amsterdam4/20/2022 - 4/20/2022Event RecapTalksSolidity Summit 2020Remote4/29/2020 - 4/30/2020Event RecapTalksGet involvedGitHubTwitterMastodonMatrixDiscover moreBlogDocumentationUse casesContributeAboutForum2024Solidity Team•Security Policy•Code of Conduct
--------------------------------------------------------------------------------
URL: https://soliditylang.org/about/#content
Content:
About | Solidity Programming Language{skip to content}BlogDocumentationUse casesContributeAboutForum{About}Solidity is a statically-typed curly-braces programming language designed for developing smart contracts that run on the Ethereum Virtual Machine.Get startedContributeSolidityis a powerful programming language designed specifically for writing smart contracts on the Ethereum blockchain. With Solidity, developers can define the rules and behavior ofdecentralized applications (DApps).Smart contracts are programs that are executed inside a peer-to-peer network where nobody has special authority over the execution, and thus they allow to implement tokens of value, ownership, voting and other kinds of logics.Note that when deploying contracts, you should use the latest released version of Solidity. This is because breaking changes as well as new features and bug fixes are introduced regularly.Solidity was publicly previewed for the first time in November 2014 atDevcon0. Versioning for Solidity wascommitted. into the codebase on July 9, 2015, marking Solidity Version 0.0.1. However, v0.1.0 wasn't an actual release yet, and builds of it are not available anymore. You can read more about Solidity's history in the 5 year celebration post from 2020here.The Solidity programming language is anopen-source, community project governed by a core team. The core team is sponsored by theEthereum Foundation.Get involvedGitHubTwitterMastodonMatrixDiscover moreBlogDocumentationUse casesContributeAboutForum2024Solidity Team•Security Policy•Code of Conduct
--------------------------------------------------------------------------------
URL: https://soliditylang.org/blog/
Content:
Solidity Blog | Solidity Programming Language{skip to content}BlogDocumentationUse casesContributeAboutForum{Solidity:​log}Latest News & AnnouncementsReleasesSecurity AlertsAnnouncementsExplainersAnnouncing the Winners of the Underhanded Solidity Contest 2024Posted by Vishwa Mehta & USC Judges on October 14, 2024AnnouncementsIf you have been waiting for the results of the Underhanded Solidity Contest 2024, the countdown is over!

But before we share our insights from this year and declare the results, let's recap the most important aspects of the USC:

In essence, the Underhanded Solidity Contest is about writing seemingly innocent code that has malicious mechanisms or hidden backdoors. It is aimed at:

Raising awareness about smart contract security
Uncovering language design faults
Battle-testing newly introduced language features and restrictions
Highlighting anti-patterns in smart contact development
Establishing...Read moreSolidity 0.8.28 Release AnnouncementPosted by Solidity Team on October 9, 2024ReleasesWe are excited to announce the release of the Solidity Compiler v0.8.28.

This latest version of the compiler brings full support for transient storage state variables of value types, improvements that will speed up compilation via IR and significantly lower memory usage, some bugfixes, and more!

Notable Features

Support for Transient Storage Value Type State Variables

The previous release of the compiler (v0.8.27) introduced support for transient storage variables into the parser (see Additional Notes). This meant that the compiler could accept the syntax...Read moreSolidity 0.8.27 Release AnnouncementPosted by Solidity Team on September 4, 2024ReleasesWe are excited to announce the release of the Solidity Compiler v0.8.27.

This newest version of the compiler brings support for custom errors in require to the legacy pipeline, optimizer improvements such as caching of optimized IR that will speed up compilation via IR, several bugfixes, and more!

Notable Features

Legacy Support for require with Custom Errors

Custom errors in Solidity provide a convenient and gas-efficient way to explain to the user why an operation failed.
Support for using  errors with the require function...Read moreUnderhanded Solidity Contest 2024 AnnouncementPosted by Vishwa Mehta on July 31, 2024AnnouncementsThe Underhanded Solidity Contest is back with a bang in 2024!

After two successful seasons of the contest in 2020 and 2022 inspired by the first edition in 2017, we’re back with an exciting challenge for this year.

Before we dive into the 2024 theme, let's do a quick refresher on what the Underhanded Solidity Contest is.

The Underhanded Solidity Contest is about writing seemingly innocent code that has malicious mechanisms or hidden backdoors. Through this contest, we aim to:

Raise awareness about smart...Read moreA Closer Look at Via-IRPosted by Solidity Team on July 12, 2024ExplainersIn its current default settings, the Solidity compiler does not transform the code into any intermediate representation (IR) for generating EVM bytecode but does it in a direct fashion. There is, however, the more recently developed via-IR compilation pipeline , which employs the Yul programming language as an intermediate representation.

On a high level, the compilation steps of the two pipelines look like the following:

compilation-pipelines

In this blog post, we will be taking a closer look at the details of via-IR, understand...Read moreSolidity 0.8.26 Release AnnouncementPosted by Solidity Team on May 21, 2024ReleasesWe are excited to announce the release of the Solidity Compiler v0.8.26.
This newest version of the compiler brings support for custom errors in require, improved default Yul Optimizer sequence that will speed up compilation via IR, several bugfixes, and more!

Notable Features

Custom errors support in require

Custom errors in Solidity provide a convenient and gas-efficient way to explain to the user why an operation failed.
Solidity 0.8.26 introduces a highly anticipated feature that enables the usage of errors with require function.

The require function...Read moreSolidity Developer Survey 2023 ResultsPosted by Vishwa Mehta on April 3, 2024AnnouncementsEDIT REMARK: We noticed a minor error in the graphical representation of [1] popular Ethereum-specific IDEs and [2] Sourcify usage. The results in this blog post and corresponding graphical data in the slide deck has been updated to reflect this rectification that represents the survey data accurately.

We are thrilled to share with you the Solidity Developer Survey 2023 results! In this blog post, we will be going over key insights and detailed analysis of the various sections of the survey.

Before...Read moreSolidity 0.8.25 Release AnnouncementPosted by Solidity Team on March 14, 2024ReleasesIntroducing the newest version of the Solidity Compiler: v0.8.25.
This is a minor release following the Dencun hard-fork on Ethereum mainnet that occurred on March 13, 2024 at 13:55 UTC.

Dencun Upgrade

The Dencun upgrade combines changes to both Ethereum's consensus and execution layers.
The full list of protocol changes can be found in EIP-7569.

With Dencun now live on mainnet, we are accordingly making cancun the default EVM version the compiler will emit code for.

MCOPY in code generator

The previous release made the mcopy() builtin...Read moreTransient Storage Opcodes in Solidity 0.8.24Posted by Solidity Team on January 26, 2024ExplainersSolidity 0.8.24 supports the opcodes included in the upcoming Cancun hardfork and, in particular, the transient storage opcodes TSTORE and TLOAD as per EIP-1153.

Transient storage is a long-awaited feature on the EVM level that introduces another data location besides memory, storage, calldata (and return-data and code).
The new data location behaves as a key-value store similar to storage with the main difference being that data in transient storage is not permanent, but is scoped to the current transaction only, after which...Read moreSolidity 0.8.24 Release AnnouncementPosted by Solidity Team on January 26, 2024ReleasesWe are excited to announce the release of the Solidity Compiler v0.8.24.
This newest version of the compiler brings readiness for the "Cancun" network upgrade, including support for transient storage (EIP-1153), shard blob transactions (EIP-4844) & more.
The release binaries for macOS are now also compatible with Apple silicon chips.

Cancun Network Upgrade

The "Cancun" network upgrade provides new features in the form of opcodes and precompiles, which will need to be explicitly used to have any benefits,
but also introduces changes in the existing...Read moreSolidity Developer Survey 2023 is Live!Posted by Vishwa Mehta on December 8, 2023AnnouncementsWe recently wrapped up Solidity Summit with a bang and have one last announcement before the end of the year!

The Solidity Developer Survey for the year 2023 is live! We would love to collect your feedback and insights regarding Solidity!

📝 TAKE THE SURVEY! 📝

You can find the previous results of the Solidity Developer Survey 2022 here. In 2022, a total of 1401 developers from 100 different countries participated in the survey out of which 41% used Solidity daily, and 37.3%...Read moreOlder postsGet involvedGitHubTwitterMastodonMatrixDiscover moreBlogDocumentationUse casesContributeAboutForum2024Solidity Team•Security Policy•Code of Conduct
--------------------------------------------------------------------------------
URL: https://soliditylang.org/use-cases/
Content:
Use cases | Solidity Programming Language{skip to content}BlogDocumentationUse casesContributeAboutForum{Use_cases}With Solidity, you can create contracts for uses such as voting, crowdfunding, blind auctions, and multi-signature wallets and much more! Below we list some of the most popular use cases.Get startedDecentralized Autonomous Organizations (DAOs)Solidity has enabled the creation of DAOs, which are self-governing organizations that operate on smart contracts, allowing for transparent decision-making and governance.Learn moreGaming and Virtual WorldsSolidity has been employed to develop blockchain-based games and virtual worlds with features like asset ownership, in-game economies, and provable scarcity. It opens up new possibilities for unique digital assets and player interactions.Decentralized Finance (DeFi)Solidity has played a pivotal role in the rise of DeFi applications built on the Ethereum blockchain. Developers have created decentralized exchange logic, auction mechanisms, lending protocols, conditional payments, and more.Learn moreNon-Fungible Tokens (NFTs)Solidity has been used to implement NFTs, which have gained significant popularity for digital collectibles, artwork, and unique virtual assets like decentralized domain names.Learn moreSupply Chain and TraceabilitySolidity can be used to create smart contracts that enhance transparency and traceability in supply chain management. By recording transactions and verifying the authenticity of products, Solidity-powered smart contracts can help prevent counterfeiting and improve trust in supply chain processes.... and much moreIf you want to get started building your own applications, head to theSolidity by Examplesection to see code examples of different contracts and understand the core concepts of the language.Get involvedGitHubTwitterMastodonMatrixDiscover moreBlogDocumentationUse casesContributeAboutForum2024Solidity Team•Security Policy•Code of Conduct
--------------------------------------------------------------------------------
URL: https://soliditylang.org/blog/2020/07/08/solidity-turns-5/
Content:
Solidity v0.1.0 turns 5! A walk down memory lane... | Solidity Programming Language{skip to content}BlogDocumentationUse casesContributeAboutForumSolidity v0.1.0 turns 5! A walk down memory lane...Posted by Franziska Heintel on July 8, 2020AnnouncementsWith happiness and a tad of nostalgia, we'd like to share thatSolidity v0.1.0turns 5 years old today! (To be fair, v0.1.0 wasn't anactualrelease, but it marks the time where the Solidity team started appointing version numbers.) We are puzzled over how fast time flew by. We'd like to use this opportunity to take a look back and walk down the Solidity memory lane together with you.In short:The Solidity language evolved rapidly, the ecosystem went through highs and lows, contributors came and went (but luckily most of them stuck around!) and we're still out here, still learning, still trying to push Solidity to the next, better stages.Read on for a retrospective of the last five years of language development, thoughts on the language design process, an overview of the people behind Solidity, and a short interview with Chris on the past, the present and the future of Solidity.Thoughts on 5+ years of language designTrivia, important milestones and views on the language development process from 5+ years of Solidity development, courtesy of Alex' recentSolidity Summit talk. Thank you!Developing a language when everything around you is moving can be quite challenging. Here's our view on why Solidity used to and still needs to evolve rapidly - and why this is a good thing.1. Goals and value proposition of a programming languageSolidity's initial goal was to become a friendly, easy-to-use language with the aim to attract developers and make the entry barrier to Ethereum development as low as possible.That implied aspects like:JavaScript-like syntax.Allowing some weird implicit things.Lacking features, but being easy to learn.Over the years, the goal changed. While still trying to stay as user-friendly as possible, the additional focus now rather lays on developing a much safer language.For Solidity, that means:Solidity is verbose.Solidity is explicit.Solidity tries to highlight "risky" constructs (gas usage).2. Embedding Solidity as a valuable and practicable language into the Ethereum ecosystemThe ecosystem we develop in was and continues to be a moving target. This isn't necessarily a bad thing, however, it requires some additional flexibility and adaptability:Ethereumin itself is constantly evolving and learning. Protocol and EVM developers are busy coming up with new features, new restrictions, repricings, even new protocols (Eth 2.0); most of which has an impact on the Solidity language design.Developersare still learning and frankly, sometimes trying all sorts of things. Here, from a language perspective, it's important to find the delicate balance between allowing too much, or too little.The security communitydeveloped and matured alongside with Ethereum and it took some time for it to reach a healthy size and to build the necessary tools supporting their work.To summarize: Building Ethereum is a (learning) journey. And so is building Solidity. Together with the broader Solidity community we're continuing to figure out:what features are needed or are bad.what is good or bad syntax.what is not enough or too much verbosity.how to deliver changes quickly to developers.3. Steadily adjusting and improving the language design processSo far, questions around new features and implementation details have mostly been discussed inGithub issues, the solidity-devGitter channel, and during the public Solidity development team meetings.The firstSolidity Summit, which was held virtually in May this year, was the next step to further expand the language design discussions and invite and engage a broader circle of experts, ranging from tool developers to Solidity power users, contributors, security researchers and auditors.Currently, we're exploring more ways to interact with the aforementioned groups and include them better into the language design process.We revived the solidity-users forum, where proposals for new language features and qualities of existing aspects of the language can be discussed.We're sharing (feature) feedback surveys on a semi-regular basis.We are regularly hosting dedicated language design discussion calls, where one topic/issue/feature implementation is debated per call.For the future, we could imagine evaluating a more structured process for proposals, similar to Python Enhancement Proposals (PEPs) or Vyper Improvement Proposals (VIPs), which could be introduced step-by-step. However, we think it might be a bit too early for that at this point in time.In any case, we're happy to hear your thoughts on how we can improve the language design process to be more collaborative. If you'd like to get involved and share your ideas, feel free to join thesolidity-user forum!Highlights and milestones from v0.1.0 - v0.6.10For a collection of notable Solidity events throughout the last years check out the roadmap below!The people behind SolidityA programming language is nothing without its community, its maintainers and developers building cool stuff with it! That’s why we would like to thank the core team and more importantly the community contributors for their continued support over all these years.The core teamThe Solidity programming language is an open-source, community project mainly developed and maintained by a core team. The core team is sponsored by the Ethereum Foundation.This team currently consists of@a3d4,@aarlt,@axic,@bshastry,@cameel,@chriseth,@christianparpart,@ekpyron,@franzihei,@hrkrshnn,@leonardoalt,@marenz, and@mijovic.The wider community & contributorsWe are incredibly grateful for all community contributions, not only via commits but also via participation in Github issues, by filing bug reports or in other community functions. Also a shout-out to our former team members!We'd especially like to thank (in alphabetical order)@arkpar,@asinyagin,@benjaminion,@bobsummerwill,@chfast,@ChrisChinchilla,@Denton-L,@djudjuu,@elopio,@erak,@ethers,@federicobond,@fulldecent,@gavofyork,@ghallak,@guanqun,@jamesray1,@jvmaia,@LefterisJP,@liangdzou,@LianaHus,@mocamircea,@NicolaiSoeborg,@pirapira,@random-internet-cat,@roadriverrail,@sifmelcara,@VoR0220,@winsvega.Note that this is a non-exhaustive list. There are certainly many more great contributors, however, listing all of them would go beyond the scope of this article. 😊The past, the present and the future of Solidity: Interview with Christian ReitwiessnerCan you tell us a bit about the beginnings of Solidity? What changed most about your work on Solidity between now and then?The biggest difference between now and then is that back in the days you basically did not know if somebody would ever use what we are building. Of course we maybe had the feeling it is going to be something big, but we did not know for sure. Now, Solidity is a product which we are continuing to improve while it is out there in production, being used, holding incredible amounts of value and powering some really cool decentralized applications.Another difference is that in the beginnings, it seemed easier to get feedback. Maybe this was due to the fact that the community was much smaller. The conversations seemed more technical in a way. Now, the community became bigger and more diverse (which is a great thing!). With that it became a bit more complex in terms of collaboration and feedback especially on technical implementation details.Looking back, what was your most memorable moment of the past 5 years of Solidity development?There were many - people using the compiler before it even had a command line interface, people happily picking up the newest features, seeing the ecosystem grow and especially finally meeting people in real life you have been working with for so long.What is your favorite aspect about Solidity?Solidity looks rather high-level but is still very close to the EVM. At the same time, people with some background in programming usually understand what Solidity code is about.Where do you think Solidity needs to improve the most?It needs to be even easier to write safe smart contracts. This means we need to work on our SMTChecker, debuggers, IDEs, templates, libraries and so on.What does Eth2 mean for Solidity?On the technical level, it means we have to focus more on the Ewasm backend of Solidity, but this is a relatively straightforward task. On the conceptual level, on the other hand, it means that smart contracts will be asynchronous, which is a big challenge for everyone. The atomicity of the EVM makes many things very easy: If something is odd, just revert. Solidity needs to find a good language construct that makes the danger of asynchrony visible but also helps avoiding some pitfalls and allows the "common use-case" to be easy to write.Anything else you would like to say?Let's continue our journey to make smart contracts as safe and accessible to everyone as possible!With that being said, we'd like to wrap this little birthday celebration up and close with a virtual toast:To all the contributors over the last years: Your input, dedication and work has been incredible. THANK YOU. To the next 5 years! 🍾Previous postNext postGet involvedGitHubTwitterMastodonMatrixDiscover moreBlogDocumentationUse casesContributeAboutForum2024Solidity Team•Security Policy•Code of Conduct
--------------------------------------------------------------------------------
